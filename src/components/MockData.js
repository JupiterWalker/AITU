const testResp = "# 数据格式测试示例\n" +
    "\n" +
    "## 本文结构\n" +
    "\n" +
    "1. 本文目的\n" +
    "2. 各类格式展示\n" +
    "\n" +
    "### 1. 本文目的\n" +
    "\n" +
    "本内容用于**测试**和*演示*各类 markdown 渲染效果。[点击这里查看更多](https://www.example.com)\n" +
    "\n" +
    "### 2. 各类格式展示\n" +
    "\n" +
    "- 支持无序列表\n" +
    "- **支持粗体**\n" +
    "- *支持斜体*\n" +
    "\n" +
    "#### 数据表格\n" +
    "\n" +
    "| 姓名   | 年龄 | 城市   |\n" +
    "| ------ | ---- | ------ |\n" +
    "| 张三   | 23   | 北京   |\n" +
    "| 李四   | 29   | 上海   |\n" +
    "| 王五   | 31   | 广州   |\n" +
    "\n" +
    "#### 插入图片\n" +
    "\n" +
    "![测试图片](https://images.unsplash.com/photo-1506744038136-46273834b3fb?w=400)\n" +
    "\n" +
    "#### Python 代码\n" +
    "\n" +
    "```python\n" +
    "def greet(name):\n" +
    "    print(f\"Hello, {name}!\")\n" +
    "greet(\"World\")\n"

const testResp2= "# Markdown综合应用示例\n" +
    "\n" +
    "## 一、基础语法与结构\n" +
    "### 1. 标题体系搭建\n" +
    "本示例采用六级标题体系（# ~ ######），当前层级展示：\n" +
    "\n" +
    "**关键结构要素**  \n" +
    "- 一级标题定义项目主脉络\n" +
    "- 二级标题划分核心功能模块\n" +
    "- 代码高亮标注技术要点\n" +
    "\n" +
    "## 二、内容展示模块\n" +
    "### 1. 列表系统\n" +
    "#### 无序列表应用\n" +
    "* 文本对齐调整（左/中/右）\n" +
    "* 复杂文档结构搭建\n" +
    "* 实时时序注记（1/3）\n" +
    "\n" +
    "[»] 展示待过滤条目\n" +
    "\n" +
    "#### 有序列表样例（实现数学归纳法记录）\n" +
    "1. 基础情形验证  \n" +
    "2. 归纳假设构建  \n" +
    "3. 归纳步骤递推  \n" +
    "4. 结论泛化证明  \n" +
    "\n" +
    "### 2. 多维数据呈现\n" +
    "\n" +
    "| 语言   | 特点            | 应用场景         |\n" +
    "|--------|-----------------|------------------|\n" +
    "| Python | 动态类型/胶水语言 | 数据科学/Web后端 |\n" +
    "| Rust   | 内存安全/零成本 | 系统编程/区块链  |\n" +
    "| Go     | 原生并发/编译快 | 微服务/云原生   |\n" +
    "\n" +
    "> 💡 行业洞察：Python在AI领域市占率达78%（Coursera 2023报告）\n" +
    "\n" +
    "## 三、技术深化部分\n" +
    "### 1. 语言特性对比\n" +
    "python\n" +
    "def merge_sort(arr):\n" +
    "    \"\"\"实现分治策略的典型用例\"\"\"\n" +
    "    if len(arr) <= 1:\n" +
    "        return arr\n" +
    "    mid = len(arr)//2\n" +
    "    return merge(merge_sort(arr[:mid]), merge_sort(arr[mid:]))\n" +
    "\n" +
    "\n" +
    "json\n" +
    "{\n" +
    "  \"project_config\": {\n" +
    "    \"versionControl\": \"*\",\n" +
    "    \"ci_cd\": [\"GitHub Actions\", \"GitLab CI\"],\n" +
    "    \"dependencies\": {\n" +
    "      \"python\": \"3.9+\",\n" +
    "      \"rust\": \"=1.67.0\"\n" +
    "    }\n" +
    "  }\n" +
    "}\n" +
    "\n" +
    "\n" +
    "### 2. 数学模型构建\n" +
    "行内公式：投资回报率$R = \\left(1 + \\frac{r}{n}\\right)^{nt} - 1$  \n" +
    "（复利计算模型，$r$为年利率，$n$为复利周期）\n" +
    "\n" +
    "---\n" +
    "\n" +
    "$$\n" +
    "\\begin{aligned}\n" +
    "\\min_{x} \\quad & \\frac{1}{2}x^T Q x + c^T x \\\\\n" +
    "\\text{s.t.} \\quad & Ax \\leq b \\\\\n" +
    "& Cx = d\n" +
    "\\end{aligned}\n" +
    "$$\n" +
    "*线性规划标准型实现*\n" +
    "\n" +
    "## 四、资源整合\n" +
    "### 1. 学习路径推荐\n" +
    "[Coursera算法专项课程](https://www.coursera.org/specializations/algorithms)  \n" +
    "（建议配合Rust实现红黑树）\n" +
    "\n" +
    "### 2. 工具链图谱\n" +
    "![](https://raw.githubusercontent.com/github/explore/main/topics/tools-topic/tools.png)  \n" +
    "*GitHub官方工具生态系统概览*\n" +
    "\n" +
    "## 五、综合应用场景\n" +
    "### 1. DevOps文档示例\n" +
    "mermaid\n" +
    "graph TD\n" +
    "    A[本地开发] -->|git push| B(Cloud Repo)\n" +
    "    B --> C{CI系统}\n" +
    "    C -->|✅| D[部署到prod]\n" +
    "    C -->|❌| E[触发告警]\n" +
    "\n" +
    "\n" +
    "### 2. 质量控制体系\n" +
    "- ✅ 理论验证：使用`sympy`库数学验算\n" +
    "- 💡 实践方法：单元测试覆盖率＞85%\n" +
    "- 🚀 优化指标：代码复杂度≤15\n" +
    "\n" +
    "> ⚠️ 注意：所有数学模型需通过正交试验设计验证  \n" +
    "> *公式验证流程：仿真模拟→小规模试点→全量部署*"